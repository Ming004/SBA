import string
from collections import Counter
from sklearn.linear_model import LogisticRegression
import numpy as np

def encrypt_check(raw):
    word_count = len(raw.split())
    if word_count < 200:
        return "Must be at least 200 words."
    return "valid...."

def encrypt_cipher(text, shift):
    shift %= 26
    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    lower = 'abcdefghijklmnopqrstuvwxyz'
    shifted_upper = upper[shift:] + upper[:shift]
    shifted_lower = lower[shift:] + lower[:shift]
    translation_table = str.maketrans(upper + lower, shifted_upper + shifted_lower)
    return text.translate(translation_table)

def decrypt(text, shift):
    return encrypt_cipher(text, -shift)

def cal_word_count_of_cipher(text):
    freq = {}
    for i in text:
        if i.isalpha():
            i = i.lower()
            freq[i] = freq.get(i, 0) + 1
    return freq 

def cal_k_value(shift):
    # Placeholder for future k-value calculation implementation
    pass

def frequency_analysis(text):
    text = ''.join(filter(str.isalpha, text)).lower()
    freq = Counter(text)
    total = sum(freq.values())
    return {char: count / total for char, count in freq.items()}

def predict_shift_using_ml(ciphertext):
    english_freq = {
        'e': 0.127, 't': 0.0906, 'a': 0.0817, 'o': 0.0751, 'i': 0.0697, 'n': 0.0675,
        's': 0.0633, 'h': 0.0609, 'r': 0.0599, 'd': 0.0425, 'l': 0.0403, 'c': 0.0278,
        'u': 0.0276, 'm': 0.0241, 'w': 0.0236, 'f': 0.0223, 'g': 0.0202, 'y': 0.0197,
        'p': 0.0193, 'b': 0.0149, 'v': 0.0098, 'k': 0.0077, 'j': 0.0015, 'x': 0.0015,
        'q': 0.00095, 'z': 0.00074
    }

    cipher_freq = frequency_analysis(ciphertext)
    cipher_vector = np.array([cipher_freq.get(char, 0) for char in string.ascii_lowercase]).reshape(1, -1)
    english_vector = np.array([english_freq.get(char, 0) for char in string.ascii_lowercase])

    shifts = list(range(26))
    models = [LogisticRegression().fit([np.roll(english_vector, shift)], [shift]) for shift in shifts]
    predictions = [model.predict(cipher_vector)[0] for model in models]
    predicted_shift = Counter(predictions).most_common(1)[0][0]

    return predicted_shift

# Example usage
if __name__ == "__main__":
    text = "Hello, this is a sample text with more than two hundred words. " * 10
    shift = 3
    cipher = encrypt_cipher(text, shift)
    print(f"Encrypted: {cipher}")
    predicted_shift = predict_shift_using_ml(cipher)
    print(f"Predicted Shift: {predicted_shift}")
    decrypted = decrypt(cipher, predicted_shift)
    print(f"Decrypted: {decrypted}")